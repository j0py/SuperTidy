TITLE:: JSTidy
summary:: Use Tidal Cycles syntax in SuperCollider
categories:: mini-notation, sequencing
related:: Classes/JSMini, Classes/JSSamples

DESCRIPTION::
Enables combining function/mini-notation-pattern pairs to trigger notes directly in SuperCollider.

code::
\a -- "buf 1 <2 4>/3*2" - "snd kit1" - "=out 0.2" - "=room 0.1"
::

This would play buffer indexes 1,2,3,4 with some rhythm from the samples folder named "kit1" and send the audio to \out bus with gain 0.2, and to the \room bus with gain 0.1.
Re-evaluating this line of code will activate your changes at the next quantisation point.

In Tidal Cycles you combine function/pattern pairs like so:

code::
d1 $ note "1 2 3 4" # sound "kit1"
::

This is not possible in the Interpreter to SuperCollider, but with a few small changes, it can be done:

code::
\d1 -- "note 1 2 3 4" - "sound kit1" - "=out 1"
::

The "=out" bit tells Tidy to what audio bus the generated signal should be written. To make it parsable in SuperCollider, the function that you want to call is included in the string that holds the pattern. So the format is: function, a space, pattern.

The "-" operator is actually the "|>" operator. In Tidal Cycles they use the "#" operator, but the Interpreter does not accept that character. All the other combining operators are as in Tidal Cycles: |>, |<, |>|, |+, |/, etc. Getting the structure from both sides can be done in Tidal Cycles with or without the vertical bars: "|*|" is the same as "*". In Tidy this is not always possible in the Interpreter.

The "$" operator from Tidal Cycles is also not possible in SuperCollider, and has been replaced by the "--" and "|" operators.

code::
\a -- "off 0.125" |+ "note 3" | "note 0 -3 6 8" - "buf 5 6" - "snd kit1" - "=out 0.5"
::

CLASSMETHODS::

METHOD:: new
You never call this yourself, it is called by a method that has been added to the Symbol class

ARGUMENT:: name
the symbol

returns:: a JSTidy object
