TITLE:: JSTidy
summary:: Use Tidal Cycles syntax in SuperCollider's Interpreter
categories:: Part of the Tidy quark
related:: Classes/JSMini, Classes/JSSamples

DESCRIPTION::
Combining ProxySpace, JSMini (mininotation parser) with SuperCollider's Interpreter makes it possible to use almost equal syntax for specifying layers of sound and rhythm as in Tidal Cycles.

code::
~a < "buf 1 <2 4>/3*2" - "snd kit1" - "raw 0.2" - "room 0.1"
::

This would play buffer indexes 1,2,3,4 with some rhythm from the samples folder named "kit1" and send the audio to raw output with gain 0.2, and to the reverb input with gain 0.1.
Re-evaluating this line of code (after changing numbers) will smoothly crossfade from the previous numbers to the new numbers at the next quantisation point.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: proxy
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: should_log
(describe method here)

ARGUMENT:: level
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: show
(describe method here)

ARGUMENT:: count
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: hush
(describe method here)

ARGUMENT:: index
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: log
(describe method here)

ARGUMENT:: level
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: stop
(describe method here)

returns:: (describe returnvalue here)

METHOD:: send
(describe method here)

ARGUMENT:: from
(describe argument here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: fxnames
(describe method here)

returns:: (describe returnvalue here)


INSTANCEMETHODS::

METHOD:: <|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |*|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |<|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |>
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |/
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: func
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |+
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: >
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: add_func
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: >|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: +|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: +
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |*
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: /
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: /|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: doesNotUnderstand
(describe method here)

ARGUMENT:: selector
(describe argument here)

ARGUMENT::  ... args
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: *
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |/|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: proxy
(describe method here)

returns:: (describe returnvalue here)

METHOD:: |+|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |%
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: printOn
(describe method here)

ARGUMENT:: stream
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: add
(describe method here)

ARGUMENT:: obj
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |<
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: %|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: <>
(describe method here)

ARGUMENT:: input
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: <
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: |>|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: -
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: %
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: add_branch
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: *|
(describe method here)

ARGUMENT:: str
(describe argument here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::

